# Use an official Python runtime as a parent image
FROM python:3.10-slim-buster

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PIP_NO_CACHE_DIR off
ENV PIP_DISABLE_PIP_VERSION_CHECK on

# Install system dependencies required for Chrome and other operations
# procps is useful for ps, libnss3 for chrome
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    ca-certificates \
    procps \
    # Chrome dependencies
    libglib2.0-0 libnss3 libgconf-2-4 libfontconfig1 fonts-liberation \
    libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcups2 libdbus-1-3 \
    libdrm2 libgbm1 libgtk-3-0 libnspr4 libpango-1.0-0 libx11-6 \
    libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 \
    libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 \
    lsb-release xdg-utils \
    # build-essential and libffi-dev might be needed if pip packages (like curl_cffi)
    # don't have pre-compiled wheels for the architecture, but usually they do.
    # build-essential libffi-dev \
    --no-install-recommends && \
    # Add Google Chrome repository
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \
    sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list' && \
    # Install Google Chrome
    apt-get update && \
    apt-get install -y google-chrome-stable --no-install-recommends && \
    # Clean up
    apt-get purge -y --auto-remove wget gnupg && \
    rm -rf /var/lib/apt/lists/*

# Set the working directory in the container
WORKDIR /app

# Copy the requirements file into the container at /app
COPY requirements.txt .

# Install any needed packages specified in requirements.txt
# webdriver-manager will download chromedriver at runtime based on google-chrome-stable version
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code into the container at /app
COPY v15.py .

# Make port 8000 available to the world outside this container
EXPOSE 8000

# IMPORTANT:
# Your v15.py script has `options.add_argument("--headless")` commented out.
# For Selenium to work inside Docker without a display server (like Xvfb),
# Chrome MUST run in headless mode. Please ensure you uncomment or add
# `options.add_argument("--headless")` in your `setup_selenium_driver` function in v15.py.
# The options `"--no-sandbox"` and `"--disable-dev-shm-usage"` are already correctly set
# in your script for Docker environments.

# Define the command to run the application
CMD ["uvicorn", "v15:app", "--host", "0.0.0.0", "--port", "8000"]